version: '3.7'

services:
  # OpenTelemetry Collector (Atualizado para a versão estável específica)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest # Versão estável mais recente
    container_name: otel-collector
    hostname: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics endpoint
      - "13133:13133" # health check
    networks:
      monitoramento_rede:
        # Usando o IP original do seu arquivo, mas recomendando usar o nome do serviço
        ipv4_address: 172.28.0.40 
    restart: unless-stopped

  # Jaeger para tracing (Atualizado para a versão estável específica)
  jaeger:
    image: jaegertracing/all-in-one:1.74.0 # Versão estável mais recente
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoramento_rede
    restart: unless-stopped

  # Prometheus (Atualizado para a versão estável mais recente da série 3.x)
  prometheus:
    image: prom/prometheus:v3.7.1 # Versão estável mais recente
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      # Monta o arquivo de regras de alerta
      - ./alerting_rules.yml:/etc/prometheus/alerting_rules.yml 
    ports:
      - '9090:9090'
    networks:
      - monitoramento_rede
    depends_on:
      - alertmanager 
      - otel-collector
    restart: unless-stopped
    
  # Serviço Alertmanager (Atualizado para a versão estável mais recente)
  alertmanager:
    image: prom/alertmanager:v0.28.1 # Versão estável mais recente
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - '9093:9093' # Porta da UI e API do Alertmanager
    networks:
      - monitoramento_rede
    restart: unless-stopped
    
  # Serviço Grafana para Visualização (Atualizado para a versão estável específica)
  grafana:
    image: grafana/grafana:12.2.0 # Versão estável mais recente
    container_name: grafana
    # Mapeamento para a porta padrão da UI: Host 3000 -> Container 3000
    ports:
      - '3000:3000' 
    volumes:
      # Volume para persistir configurações e dashboards
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoramento_rede
    depends_on:
      - prometheus
      - jaeger
    restart: unless-stopped

  # cAdvisor (monitoramento de recursos do Docker) (Atualizado para a versão estável mais recente)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2 # Versão estável mais recente
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    ports:
      - '8080:8080'
    restart: unless-stopped
    networks:
      - monitoramento_rede

  # Node Exporter para monitoramento do Host (Atualizado para a versão estável mais recente)
  node-exporter:
    image: prom/node-exporter:v1.9.1 # Versão estável mais recente na série 1.x
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+)($|/)'
    restart: unless-stopped
    networks:
      - monitoramento_rede

  # Container Debian com OpenTelemetry (MANTIDO)
  debian_test:
    build:
      context: .
      dockerfile: Dockerfile.debian
    container_name: debian_test
    ports:
      - '9101:9100'
    environment:
      # Usando o nome do serviço 'otel-collector' no lugar do IP, mas mantendo o IP original
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://172.28.0.40:4318 
      - OTEL_SERVICE_NAME=debian-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=debian-service,service.version=1.0.0,deployment.environment=production
    restart: unless-stopped
    networks:
      monitoramento_rede:
        ipv4_address: 172.28.0.10
    depends_on:
      - otel-collector
    
  # Container Ubuntu com OpenTelemetry (MANTIDO)
  ubuntu_test:
    build:
      context: .
      dockerfile: Dockerfile.ubuntu
    container_name: ubuntu_test
    ports:
      - '9102:9100'
    environment:
      # Usando o nome do serviço 'otel-collector' no lugar do IP, mas mantendo o IP original
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://172.28.0.40:4318 
      - OTEL_SERVICE_NAME=ubuntu-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=ubuntu-service,service.version=1.0.0,deployment.environment=production
    restart: unless-stopped
    networks:
      monitoramento_rede:
        ipv4_address: 172.28.0.20
    depends_on:
      - otel-collector

# Volumes para persistência de dados
volumes:
  grafana-storage: {} # Volume criado para persistir os dados do Grafana

# Redes
networks:
  monitoramento_rede:
    name: monitoramento_rede
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16